-- Attempting to apply DQN to mountain car. 
-- Environment from https://github.com/Kaixhin/rlenvs
-- DQN code from https://github.com/blakeMilner/DeepQLearning
-- Libraries
local image = require('image')
local MountainCar = require('rlenvs.MountainCar')
local Brain = require('deepqlearn')
local env = MountainCar()

-- Mountain Car Variables
local observation = env:start()
local stateSpec = env:getStateSpec()
local actionSpec = env:getActionSpec()

local reward, terminal
local steps, episodes, totalReward = 0, 0, 0

-- Number of training episodes
local trainingEpisodes = 50

-- Result tables
local endPosition = {}
local nSteps = {}

-- Initialize NN with 2 inputs and 3 outputs
Brain.init(2, 3)

while episodes < trainingEpisodes do
	-- Send observations (x, y) to NN and select action
	-- -2 as NN returns {0 1 2} but action should be {-1 0 1}
	local action = Brain.forward(observation) - 2 
	reward, observation, terminal = env:step(action)
	totalReward = totalReward + reward
	steps = steps + 1
	print(episodes)
	print(observation)
	-- Apply Q-learning to network using obtained reward
	Brain.backward(reward)
	if terminal then
		table.insert(endPosition, observation[2])
		table.insert(nSteps, steps)
		print('Episode: ' .. episodes)
		print('Steps: ' .. steps)
		print('Total Reward: ' .. totalReward)
		episodes = episodes + 1
		steps = 0
		observation = env:start()
	end
end
print('Total episodes: ' .. episodes)

-- Save results
Brain.save("MCDQN.dat")
endPositionS = torch.serialize(endPosition, "ascii")
nStepsS = torch.serialize(nSteps, "ascii")
torch.save("endPosition.txt", endPositionS, "ascii")
torch.save("nSteps.txt", nStepsS, "ascii")
